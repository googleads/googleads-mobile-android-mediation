apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

/**
 * Extra properties used by the project.
 */
ext {
    // String property to store the proper name of the mediation network adapter.
    adapterName = "InMobi"
    // String property to store version name.
    stringVersion = "10.5.7.0"
    // String property to store group id.
    stringGroupId = "com.google.ads.mediation"
    // Jacoco version to generate code coverage data
    jacocoVersion = '0.8.8'
}

android {
    compileSdkVersion 32
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 31
        versionCode 10050700
        versionName stringVersion
        consumerProguardFiles 'proguard-rules.pro'
        buildConfigField('String', 'ADAPTER_VERSION', "\"${stringVersion}\"")
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }

}

tasks.withType(Test) {
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
        exceptionFormat = 'full'
    }
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion= "$jacocoVersion"
}

task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest',
                    'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['androidx/**/*.*',
                      '**/view/*.*',
                      '**/data/*.*',
                      '**/data/model/*.*',
                      '**/generated/callback/*.*',
                      '**/lambda$*.class',
                      '**/lambda.class',
                      '**/*lambda.class',
                      '**/*lambda*.class']

    def debugTree = fileTree(dir:
            "${buildDir}/intermediates/javac/debug/classes",
            excludes: fileFilter
    )

    def mainSrc = "$project.projectDir/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "${buildDir}", includes:[
            "/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"]))
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.annotation:annotation:1.5.0'

    // Mobile Ads SDK
    implementation 'com.google.android.gms:play-services-ads:22.1.0'

    // Jacoco
    implementation "org.jacoco:org.jacoco.core:$jacocoVersion"

    // inMobi SDK
    implementation 'com.inmobi.monetization:inmobi-ads-kotlin:10.5.7'

    // Unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.20'
    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testImplementation 'org.robolectric:robolectric:4.9'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'
}

/**
 * Jar task to make a sources jar.
 */
task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

/**
 * Publish closure consisting of maven publications.
 */
publishing {
    publications {
        adapterPublications(MavenPublication) {
            groupId = stringGroupId
            artifactId = project.name
            version = stringVersion

            // Add the aar artifact to publication.
            artifact("$buildDir/outputs/aar/${project.name}-release.aar") {
                builtBy build
            }

            // Add the sources jar artifact to the publication.
            artifact(sourcesJar)

            // Generate the pom file.
            pom {
                name = "${adapterName} mediation adapter for the Google Mobile Ads SDK"
                description = "The ${adapterName} mediation adapter is a library that handles " +
                        "communication between the Google Mobile Ads SDK and the ${adapterName} " +
                        "SDK. It enables you to load ads from ${adapterName} using the mediation " +
                        "feature in the Google Mobile Ads SDK."
                url = "https://developers.google.com/admob/android/mediation/${project.name}"
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://github.com/googleads/googleads-mobile-android-mediation/blob/main/LICENSE'
                        distribution = 'repo'
                    }
                }
            }

            // Add the required dependencies to the generated `pom.xml` file.
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // Exclude filetree dependencies.
                    if (it.name != 'unspecified') {
                        println("Adding dependency: " + it.group + ":" + it.name + ":" + it.version)

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        if (it.artifacts.size() > 0) {
                            dependencyNode.appendNode('type', it.artifacts[0].type)
                        }
                    }
                }
            }
        }
    }
}

/**
 * Copy artifacts into a single directory for redistribution.
 */
task copyArtifactsForDistribution(type: Copy) {
    from "$buildDir/outputs/aar/${project.name}-release.aar",
            "$buildDir/libs/${project.name}-sources.jar",
            "$buildDir/publications/adapterPublications/pom-default.xml"
    into "$buildDir/distribution"
}

/**
 * Create `zip` file for redistribution under `build/distribution` directory.
 */
task packageDistribution(type: Zip) {
    from("$buildDir/distribution") {
        rename("${project.name}-release.aar", "${project.name}-${stringVersion}.aar")
        rename("${project.name}-sources.jar", "${project.name}-${stringVersion}-sources.jar")
        rename("pom-default.xml", "${project.name}-${stringVersion}.pom")
    }

    archiveFileName = "${adapterName}AndroidAdapter-${stringVersion}.zip"
    destinationDirectory = file("${rootProject.projectDir}/build/distribution")
}

build.dependsOn clean
build.mustRunAfter clean
copyArtifactsForDistribution.dependsOn(build, sourcesJar, generatePomFileForAdapterPublicationsPublication)
packageDistribution.dependsOn copyArtifactsForDistribution
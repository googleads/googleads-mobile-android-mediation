import com.google.googlejavaformat.java.JavaFormatterOptions
import java.nio.charset.Charset

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

/**
 * Extra properties used by the project.
 */
ext {
    stringCoreVersionName = rootProject.ext.sdkVersions.core.name.join('.')
    
    stringVersionName = "${stringCoreVersionName}.${rootProject.ext.sdkVersions.adapter.name}"
    stringVersionCode = Integer.parseInt("${rootProject.ext.sdkVersions.core.code}${rootProject.ext.sdkVersions.adapter.code}")

    // String property to store group id.
    stringGroupId = "com.google.ads.mediation"
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30

        versionCode stringVersionCode
        versionName stringVersionName

        buildConfigField('String', 'ADAPTER_VERSION', "\"${stringVersionName}\"")
        buildConfigField("int", "VERSION_CODE", "${rootProject.ext.sdkVersions.adapter.name}")

        buildConfigField("String", "ADAPTER_VERSION_MAJOR", "\"${rootProject.ext.sdkVersions.core.name[0]}\"")
        buildConfigField("String", "ADAPTER_VERSION_MINOR", "\"${rootProject.ext.sdkVersions.core.name[1]}\"")
        buildConfigField("String", "ADAPTER_VERSION_SDK_PATCH", "\"${rootProject.ext.sdkVersions.core.name[2]}\"")
        buildConfigField("String", "ADAPTER_VERSION_ADAPTER_PATCH", "\"${rootProject.ext.sdkVersions.adapter.name}\"")

        consumerProguardFiles 'lib-proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation('com.google.android.gms:play-services-ads') {
        version {
            strictly rootProject.ext.externalVersions.admob.strictly
            prefer rootProject.ext.externalVersions.admob.prefer
        }
    }

    api "androidx.annotation:annotation:${rootProject.ext.externalVersions.annotation}"
    api "net.zucks:zucks-ad-network-sdk:${stringCoreVersionName}"

    // region Zucks SDK uses JCenter only version of ExoPlayer for non AndroidX apps support.
    // The following defines import newly version from Google Maven Repository.
    implementation('com.google.android.exoplayer:exoplayer-core') {
        version {
            strictly rootProject.ext.externalVersions.exoplayer.strictly
            prefer rootProject.ext.externalVersions.exoplayer.prefer
        }
    }

    implementation('com.google.android.exoplayer:exoplayer-ui') {
        version {
            strictly rootProject.ext.externalVersions.exoplayer.strictly
            prefer rootProject.ext.externalVersions.exoplayer.prefer
        }
    }
    // endregion

    testImplementation "androidx.test:core:${rootProject.ext.externalVersions.androidTest}"
    testImplementation "junit:junit:${rootProject.ext.externalVersions.junit}"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.externalVersions.kotlin}"
    testImplementation "org.hamcrest:hamcrest-core:${rootProject.ext.externalVersions.hamcrest}"
    testImplementation "io.mockk:mockk:${rootProject.ext.externalVersions.mockk}"
    testImplementation "org.robolectric:robolectric:${rootProject.ext.externalVersions.robolectric}"
}

task format() {
    doLast {
        def options = JavaFormatterOptions.builder()
                .style(JavaFormatterOptions.Style.GOOGLE)
                .build()
        def formatter = new com.google.googlejavaformat.java.Formatter(options)

        android.sourceSets.main.java.srcDirs.each {
            fileTree(it).filter { it.isFile() }.files.each {
                formatter.formatSource(
                        com.google.common.io.Files.asCharSource(file(it), Charset.forName('UTF-8')),
                        com.google.common.io.Files.asCharSink(file(it), Charset.forName('UTF-8'))
                )
            }
        }
    }
}

/**
 * Jar task to make a sources jar.
 */
task sourcesJar (type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

/**
 * Publish closure consisting of maven publications.
 */
publishing {
    publications {
        zucksPublications(MavenPublication) {
            groupId = stringGroupId
            artifactId = project.name
            version = stringVersionName

            // Add the aar artifact to publication.
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar") {
                builtBy build
            }

            // Add the sources jar artifact to the publication.
            artifact(sourcesJar)

            pom {
                name = "Zucks mediation adapter for the Google Mobile Ads SDK"
                description = "The Zucks mediation adapter is a library that handles " +
                        "communication between the Google Mobile Ads SDK and the Zucks " +
                        "SDK. It enables you to load ads from Zucks using the mediation " +
                        "feature in the Google Mobile Ads SDK."
                url = "https://developers.google.com/admob/android/mediation/zucks"
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://github.com/googleads/googleads-mobile-android-mediation/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
            }

            // Add the required dependencies to the published `pom.xml` file.
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // Exclude filetree dependencies.
                    if (it.name != 'unspecified') {
                        println("Adding dependency: " + it.group + ":" + it.name + ":" + it.version)

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        if (it.artifacts.size() > 0) {
                            dependencyNode.appendNode('type', it.artifacts[0].type)
                        }
                    }
                }
            }
        }
    }
}

/**
 * Copy artifacts into a single directory for redistribution.
 */
task copyArtifactsForDistribution(type: Copy) {
    from "$buildDir/outputs/aar/${project.name}-release.aar",
            "$buildDir/libs/${project.name}-sources.jar",
            "$buildDir/publications/adapterPublications/pom-default.xml"
    into "$buildDir/distribution"
}

/**
 * Create `zip` file for redistribution under `build/distribution` directory.
 */
task packageDistribution(type: Zip) {
    from("$buildDir/distribution") {
        rename("${project.name}-release.aar", "${project.name}-${stringVersionName}.aar")
        rename("${project.name}-sources.jar", "${project.name}-${stringVersionName}-sources.jar")
        rename("pom-default.xml", "${project.name}-${stringVersionName}.pom")
    }

    archiveFileName = "ZucksAndroidAdapter-${stringVersionName}.zip"
    destinationDirectory = file("${rootProject.projectDir}/build/distribution")
}

build.dependsOn clean
build.mustRunAfter clean
copyArtifactsForDistribution.dependsOn(build, sourcesJar, generatePomFileForZucksPublicationsPublication)
packageDistribution.dependsOn copyArtifactsForDistribution
